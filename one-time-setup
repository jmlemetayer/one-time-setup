#!/bin/sh

# The master tarball url
TBURL=https://github.com/jmlemetayer/one-time-setup/archive/master.tar.gz

# Create a temporary directory
TMPDIR="$(mktemp -d)"

# The master tarball directory
TBDIR=$TMPDIR/one-time-setup-master

# The machine type
MACHTYPE=all

# Clean and exit
clean_up()
{
	rm -rf $TMPDIR
	exit $1
}

# Error fallback
error()
{
	echo >&2 $1
	clean_up 1
}

# Set a parameter in the configuration
# 1: Configuration file
# 2: Parameter name
# 3: Parameter value (optional)
param_set()
{
	[ -z "$3" ] && echo "# $2 is not set" >> $1 || echo $2 := $3 >> $1
	[ $2 = MACHINE_TYPE ] && MACHTYPE=$3
}

# Set a bool parameter in the configuration
# 1: Configuration file
# 2: Parameter name
# 3: Parameter description
param_bool()
{
	local IN
	read -p "$3 (Y/n) " IN
	case "$IN" in
		[Yy]|[Yy][Ee][Ss]) ;;
		*) [ -z "$IN" ] || { param_set $1 $2; echo; return; } ;;
	esac
	param_set $1 $2 y; echo
}

# Set a string parameter in the configuration
# 1: Configuration file
# 2: Parameter name
# 3: Parameter description
# 4: Default value (optional)
param_string()
{
	local IN DESC="$3:"
	[ -n "$4" ] && DESC="$3 [$4]:"
	read -p "$DESC " IN
	[ -z "$IN" -a -n "$4" ] && IN="$4"
	param_set $1 $2 "$IN"; echo
}

# Set a list parameter in the configuration
# 1: Configuration file
# 2: Parameter name
# 3: Parameter description
# 4: List values
# 5: Default value (optional)
param_list()
{
	local IN DESC="$3:"
	[ -n "$5" ] && DESC="$3 [$5]:"
	echo $4 | awk -F, '{for (i=1; i<=NF; i++) print i ") " $i}'
	read -p "$DESC " IN
	[ -z "$IN" ] && { [ -n "$5" ] && IN="$5" || \
		{ param_set $1 $2; echo; return; }; }
	[ $IN -eq $IN ] 2>/dev/null && IN=$(echo $4 | awk -F, '{print $'$IN'}')
	IN=$(echo $4 | awk -F, '{for (i=1; i<=NF; i++) if ($i == "'$IN'") print $i}')
	param_set $1 $2 "$IN"; echo
}

# Parse a parameter file
# 1: Parameter file
# 2: Configuration file
param_parse()
{
	local PARAM TYPE DEFAULT VALUES DESC MACH
	for LINE in $(cat $1 | sed 's/ /#/g')
	do
		LINE="$(echo $LINE | sed 's/#/ /g')"
		PARAM=$(echo $LINE | awk -F: '{print $1}')
		MACH=$(echo $LINE | awk -F: '{print $2}')
		[ $MACHTYPE != all -a $MACH != all -a $MACHTYPE != $MACH ] && \
			{ param_set $2 $PARAM; continue; }
		TYPE=$(echo $LINE | awk -F: '{print $3}')
		case $TYPE in
			bool)
				DESC="$(echo $LINE | awk -F: '{print $4}')"
				param_bool $2 $PARAM "$DESC"
				;;
			string)
				DEFAULT="$(echo $LINE | awk -F: '{print $4}')"
				DESC="$(echo $LINE | awk -F: '{print $5}')"
				param_string $2 $PARAM "$DESC" "$DEFAULT"
				;;
			list)
				DEFAULT=$(echo $LINE | awk -F: '{print $4}')
				VALUES=$(echo $LINE | awk -F: '{print $5}')
				DESC="$(echo $LINE | awk -F: '{print $6}')"
				param_list $2 $PARAM "$DESC" $VALUES $DEFAULT
				;;
			*)
				error "Failed to parse the parameter file: $1"
				;;
		esac
	done
}

# Trap the clean_up function
trap "clean_up 0" HUP INT TERM

# Install make
if [ -z "$(which make)" ]
then
	case "$(lsb_release -s -i)" in
		Ubuntu) sudo apt-get -qq >/dev/null install make || \
			error "Failed to install make" ;;
		*) error "This distribution is not supported yet." ;;
	esac
fi

# Download and extract the tarball
wget -q -O - $TBURL | tar xz -C $TMPDIR

# Create the configuration file
for DIR in $(find $TBDIR -maxdepth 1 -type d | sort)
do
	[ -r $DIR/parameters ] && param_parse $DIR/parameters $TBDIR/.config
done

# Copy the configuration file in home for backup
cp $TBDIR/.config $HOME/.one-time-setup

# Execute the makefile
make -C $TBDIR --no-print-directory $@ || error "Failed to intall"

clean_up 0
