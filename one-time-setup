#!/bin/sh

# The master tarball url
URL=https://github.com/jmlemetayer/one-time-setup/archive/master.tar.gz

# The master tarball directory
DIR=$(mktemp -d)/one-time-setup-master

# The machine type
MCH=all

# Clean and exit
# 1: Exit status
clean() { rm -rf ${DIR%/*}; exit $1; }

# Error fallback
# 1: Error string
error() { echo >&2 $1; clean 1; }

# Set a parameter in the configuration
# 1: Output configuration file
# 2: Parameter name
# 3: Parameter value (optional)
p()
{
	[ -z "$3" ] && echo "# $2 is not set" >> $1 || echo $2=$3 >> $1
	[ $2 = MACHINE_TYPE ] && MCH=$3
}

# Set a bool parameter in the configuration
# 1: Output configuration file
# 2: Parameter name
# 3: Parameter description
# 4: Default value (optional)
pbool()
{
	local F I D="$3 (Y/n)"
	[ "$4" = n ] && D="$3 (y/N)" && F="" || F=y
	while true
	do
		read -p "$D " I
		case "$I" in
			[Yy]|[Yy][Ee][Ss]) p $1 $2 y; break ;;
			[Nn]|[Nn][Oo]) p $1 $2; break ;;
			*) [ -z "$I" ] && { p $1 $2 $F; break; } ;;
		esac
	done
	echo
}

# Set a string parameter in the configuration
# 1: Output configuration file
# 2: Parameter name
# 3: Parameter description
# 4: Default value (optional)
pstring()
{
	local I D="$3:"
	[ -n "$4" ] && D="$3 [$4]:"
	read -p "$D " I
	[ -z "$I" -a -n "$4" ] && I="$4"
	p $1 $2 "$I"; echo
}

# Set a list parameter in the configuration
# 1: Output configuration file
# 2: Parameter name
# 3: Parameter description
# 4: List values
# 5: Default value (optional)
plist()
{
	local I D="$3:"
	[ -n "$5" ] && D="$3 [$5]:"
	echo $4 | awk -F, '{for(i=1;i<=NF;i++)print i") "$i}'
	while true
	do
		read -p "$D " I
		[ -z "$I" ] && { [ -n "$5" ] && I="$5" || { p $1 $2; break; }; }
		[ $I -eq $I ] 2>/dev/null && I=$(echo $4 | awk -F, '{print$'$I'}')
		I=$(echo $4 | awk -F, '{for(i=1;i<=NF;i++)if($i=="'$I'")print$i}')
		[ -n "$I" ] && { p $1 $2 "$I"; break; }
	done
	echo
}

# Parse a parameter file
# 1: Parameter file
# 2: Output configuration file
pparse()
{
	local P T F V D M
	for L in $(cat $1 | sed 's/ /#/g')
	do
		L="$(echo $L | sed 's/#/ /g')"
		P=$(echo $L | awk -F: '{print$1}')
		M=$(echo $L | awk -F: '{print$2}')
		[ $MCH != all -a $M != all -a $MCH != $M ] && { p $2 $P; continue; }
		T=$(echo $L | awk -F: '{print $3}')
		F="$(echo $L | awk -F: '{print $4}')"
		D="$(echo $L | awk -F: '{print $5}')"
		case $T in
			bool)	pbool $2 $P "$D" $F ;;
			string)	pstring $2 $P "$D" "$F" ;;
			list)	V=$(echo $L | awk -F: '{print $5}')
				D="$(echo $L | awk -F: '{print $6}')"
				plist $2 $P "$D" $V $F ;;
			*)	error "Failed to parse the parameter file: $1" ;;
		esac
	done
}

# Trap the clean function
trap "clean 0" HUP INT TERM

# Install make
if [ -z "$(which make)" ]
then
	case "$(lsb_release -s -i)" in
		Ubuntu) sudo apt-get -qq >/dev/null install make || \
			error "Failed to install make" ;;
		*) error "This distribution is not supported yet." ;;
	esac
fi

# Download and extract the tarball
printf "Downloading...\r" && wget -q -O - $URL | tar xz -C ${DIR%/*}

# Create the configuration file
for D in $(find $DIR -maxdepth 1 -type d | sort)
do
	[ -r $D/parameters ] && pparse $D/parameters $DIR/.config
done

# Copy the configuration file in home for backup
cp $DIR/.config $HOME/.one-time-setup

# Execute the makefile
make -C $DIR --no-print-directory $@ && clean 0 || error "Failed to intall"
