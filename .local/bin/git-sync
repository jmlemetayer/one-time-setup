#!/bin/sh

while getopts "fhv" OPT
do
	case "${OPT}" in
		v) VERBOSE=yes ;;
		f) FORCE=yes ;;
		*) cat <<- EOF >&2
			usage: ${0##*/} [-v | -f]

			Synchronize the local repository with the remote ones.
		EOF
		exit 1 ;;
	esac
done

[ ${FORCE:-no} = no ] && set -e
[ ${VERBOSE:-no} = yes ] && set -x

for REMOTE in $(git remote)
do
	git fetch ${REMOTE}
	git remote prune ${REMOTE}
done

for BRANCH_REF in $(git for-each-ref --format='%(refname)' refs/heads)
do
	BRANCH=$(git for-each-ref --format='%(refname:short)' ${BRANCH_REF})
	UPSTREAM=$(git for-each-ref --format='%(upstream:short)' ${BRANCH_REF})

	case "$(git for-each-ref --format='%(upstream:trackshort)' ${BRANCH_REF})" in
		'=')
			echo "${BRANCH} is synchronized with ${UPSTREAM}" ;;
		'<')
			CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
			BRANCH_COMMIT=$(git rev-parse ${BRANCH_REF})

			if [ ${BRANCH} = ${CURRENT_BRANCH} ]
			then
				eval $(git for-each-ref --shell --format='git pull --quiet --ff-only %(upstream:remotename) %(upstream:remoteref):%(upstream)' ${BRANCH_REF})
			else
				eval $(git for-each-ref --shell --format='git push --quiet . %(upstream):%(refname)' ${BRANCH_REF})
			fi

			echo "${BRANCH} has been synchronized with ${UPSTREAM}"
			eval $(git for-each-ref --shell --format='git diff --shortstat '${BRANCH_COMMIT}' %(upstream)' ${BRANCH_REF}) ;;
		'>')
			echo "${BRANCH} has non-pushed commits behind ${UPSTREAM}" ;;
		'<>')
			echo >&2 "${BRANCH} has diverged from ${UPSTREAM}" ;;
		*)
			case "$(git for-each-ref --format='%(upstream:track)' ${BRANCH_REF})" in
				'[gone]')
					echo >&2 "${BRANCH} upstream ${UPSTREAM} is gone" ;;
				*)
					echo >&2 "${BRANCH} upstream has not been set up" ;;
			esac
	esac
done
