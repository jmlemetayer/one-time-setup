---
# This is the Jekyll Front Matter: https://jekyllrb.com/docs/frontmatter
#
# This file will be parsed and generated by GitHub Pages (which is using Jekyll)
# to replace the "{{ ... }}" variables by the actual values corresponding to the
# current repository.
#
# So this repository can be safely forked because every URLs are dynamically
# generated.
#
---
# This script does not have a shebang interpreter line because it is intended to
# be explicitly piped like this:
#
#     wget -qO- {{ site.github.url }}/install | sudo sh

####  Script initialization.
#
# The script provides a temporary directory which is safely removed at exit. It
# also checks for every unsuccessful command.

# Enable the "exit on error" option.
set -e

# Sanitize environment.
LANG=C && LC_ALL=C
umask 0027

# Create a temporary directory.
tmp=$(mktemp --directory)

# Remove the temporary directory when leaving.
trap "rm --recursive ${tmp}" EXIT

# Download and extract the GitHub resources in the temporary directory.
wget	--output-document ${tmp}/github.tar.gz \
	--no-check-certificate \
	--quiet "{{ site.github.tar_url }}"

tar	--directory ${tmp} \
	--transform 's:^[^/]*:.:' \
	--extract --gzip --file ${tmp}/github.tar.gz

####  Variables and functions.
#
# Fetch the needed variables and define some helper functions.

# Check if we have super power.
[ $(id --user) = 0 ] && root=yes || root=no

# Select the user:
#  1. If using sudo, get the user who run sudo.
#  2. If using arguments, get the provided user.
#  3. Else get the current user.
if [ ${root} = yes ] && [ -n ${SUDO_USER} ]
then
	user=${SUDO_USER}
elif [ ${root} = yes ] && [ -n "${1}" ] && getent passwd ${1} >/dev/null
then
	user=${1}
else
	user=$(id --name --user)
fi

# Get the user's home directory.
home=$(getent passwd ${user} | awk 'BEGIN { FS=":" } {print $6}')

# Helper to check if a package is installed.
is_installed() { dpkg --status ${@} >/dev/null 2>&1; }

# Helper to run a command as the selected user.
run_as_user() {
	if [ ${root} = yes ]
	then
		local command=${1}
		shift
		su ${user} --shell $(which ${command}) -- ${@}
	else
		${@}
	fi
}

# Get the desktop version.
if is_installed task-gnome-desktop
then
	desktop=gnome
elif is_installed task-desktop
then
	desktop=yes
else
	desktop=no
fi

# Display the selected variables.
echo "Using user: ${user} with home: ${home}"
echo "Got super power: ${root} and got desktop: ${desktop}"

####  System-wide configuration.
#
# If possible, install the needed packages and resources.
if [ ${root} = yes ]
then
	# Reconfigure locales.
	echo "en_GB.UTF-8 UTF-8" > /etc/locale.gen
	echo "fr_FR.UTF-8 UTF-8" >> /etc/locale.gen
	locale-gen
	update-locale LANG="en_GB.UTF-8"

	# Clean apt source file and activate contrib and non-free.
	sed --in-place \
		--expression '/^#/d' \
		--expression '/^\s*$/d' \
		--expression 's/^\(.*main\)/\1 contrib non-free/' \
		/etc/apt/sources.list

	# Install needed packages.
	apt update

	common="bash-completion
		curl
		file
		less
		lsb-release
		lsof
		man-db
		manpages
		net-tools
		tree"

	archive="bzip2
		p7zip-full
		p7zip-rar
		rar
		unrar
		unzip
		xz-utils
		zip"

	development="astyle
		autoconf
		automake
		build-essential
		clang
		cmake
		gdb
		git
		libncurses5-dev
		libtool
		minicom
		pkg-config
		python
		repo
		tig
		valgrind
		vim"

	apt install --assume-yes \
		${common} \
		${archive} \
		${development}
fi

####  User configuration.
#
# Finally, configure all user tools.

# Configure bash(1).
run_as_user install --mode 640 \
	--target-directory ${home} \
	${tmp}/.bashrc \
	${tmp}/.bash_logout \
	${tmp}/.dircolors \
	${tmp}/.profile

# Configure git(1).
if is_installed git
then
	run_as_user install --mode 640 \
		--target-directory ${home} \
		${tmp}/.gitconfig
fi

# Configure astyle(1).
if is_installed astyle
then
	run_as_user install --mode 640 \
		--target-directory ${home} \
		${tmp}/.astylerc
fi

# Configure vim(1).
if is_installed git vim
then
	rm --recursive --force ${home}/.vim*

	run_as_user mkdir --parents ${home}/.vim/backup

	run_as_user install --mode 640 \
		--target-directory ${home} \
		${tmp}/.vimrc

	run_as_user git clone --quiet \
		"https://github.com/VundleVim/Vundle.vim.git" \
		${home}/.vim/bundle/Vundle.vim

	run_as_user vim - +PluginInstall +quitall
fi

# Finally, print a success message.
echo "Successfully installed everything"
